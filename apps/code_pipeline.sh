#!/bin/bash
# Code generation pipeline using multiple AI agents

PROJECT_NAME="$1"
REQUIREMENTS="$2"

if [ -z "$PROJECT_NAME" ] || [ -z "$REQUIREMENTS" ]; then
    echo "Usage: $0 <project_name> <requirements>"
    echo "Example: $0 'my-web-app' 'Create a FastAPI web application with user authentication'"
    exit 1
fi

echo "================================================================="
echo "  CODE GENERATION PIPELINE"
echo "================================================================="
echo "Project: $PROJECT_NAME"
echo "Requirements: $REQUIREMENTS"
echo "================================================================="

# Create project directory
mkdir -p "$PROJECT_NAME"
cd "$PROJECT_NAME"

echo "Step 1: Architecture Planning with AutoGen..."
# Use AutoGen to create architecture plan
python3 << EOF
import json
import requests

# Generate architecture plan using Ollama
response = requests.post("http://localhost:11434/v1/chat/completions", 
    json={
        "model": "mistral:7b",
        "messages": [
            {"role": "system", "content": "You are a software architect. Create a detailed architecture plan."},
            {"role": "user", "content": f"Create an architecture plan for: {REQUIREMENTS}"}
        ],
        "temperature": 0.3
    }
)

if response.status_code == 200:
    plan = response.json()["choices"][0]["message"]["content"]
    with open("ARCHITECTURE.md", "w") as f:
        f.write(plan)
    print("âœ“ Architecture plan created")
else:
    print("âœ— Architecture planning failed")
EOF

echo
echo "Step 2: Code Generation with CodeLlama..."
# Generate initial code using CodeLlama
python3 << EOF
import requests
import os

# Read architecture plan
if os.path.exists("ARCHITECTURE.md"):
    with open("ARCHITECTURE.md", "r") as f:
        architecture = f.read()
else:
    architecture = "No architecture plan available"

# Generate code
response = requests.post("http://localhost:11434/v1/chat/completions",
    json={
        "model": "codellama:7b", 
        "messages": [
            {"role": "system", "content": "You are an expert programmer. Generate clean, production-ready code."},
            {"role": "user", "content": f"Based on this architecture:\n{architecture[:1000]}...\n\nGenerate code for: $REQUIREMENTS"}
        ],
        "temperature": 0.2
    }
)

if response.status_code == 200:
    code = response.json()["choices"][0]["message"]["content"]
    with open("generated_code.md", "w") as f:
        f.write(code)
    print("âœ“ Initial code generated")
else:
    print("âœ— Code generation failed")
EOF

echo
echo "Step 3: Code Review and Improvement..."
# Use Aider for code refinement (if available)
if command -v aider &> /dev/null; then
    echo "Using Aider for code refinement..."
    aider --message "Review the generated code, create proper file structure, add tests, and improve code quality" --auto-commits --yes
else
    echo "Aider not available, creating basic structure..."
    
    # Create basic project structure
    mkdir -p src tests docs
    touch README.md requirements.txt
    
    cat > README.md << EOF
# $PROJECT_NAME

## Description
$REQUIREMENTS

## Architecture
See ARCHITECTURE.md for detailed architecture plan.

## Generated Code
See generated_code.md for initial implementation.

## Setup
\`\`\`bash
pip install -r requirements.txt
\`\`\`

## Usage
[Add usage instructions here]

## Generated by
LLMStack Open Source Deployment Pipeline
EOF

    cat > requirements.txt << EOF
# Add your dependencies here
fastapi
uvicorn
pydantic
python-dotenv
EOF
fi

echo
echo "Step 4: Documentation Generation..."
# Generate comprehensive documentation
python3 << EOF
import requests
import os

project_files = []
for root, dirs, files in os.walk("."):
    for file in files:
        if file.endswith(('.py', '.md', '.txt', '.json')):
            project_files.append(os.path.join(root, file))

file_list = "\n".join(project_files[:10])  # Limit to first 10 files

response = requests.post("http://localhost:11434/v1/chat/completions",
    json={
        "model": "mistral:7b",
        "messages": [
            {"role": "system", "content": "You are a technical writer. Generate comprehensive documentation."},
            {"role": "user", "content": f"Generate detailed documentation for a project with these files:\n{file_list}\n\nProject: $PROJECT_NAME\nRequirements: $REQUIREMENTS"}
        ],
        "temperature": 0.4
    }
)

if response.status_code == 200:
    docs = response.json()["choices"][0]["message"]["content"]
    with open("docs/DOCUMENTATION.md", "w") as f:
        f.write(docs)
    print("âœ“ Documentation generated")
else:
    print("âœ— Documentation generation failed")
EOF

echo
echo "Step 5: Quality Assurance..."
# Create quality checklist
cat > QA_CHECKLIST.md << EOF
# Quality Assurance Checklist

## Code Quality
- [ ] Code follows best practices
- [ ] Proper error handling implemented  
- [ ] Security considerations addressed
- [ ] Performance optimizations applied

## Testing
- [ ] Unit tests created
- [ ] Integration tests implemented
- [ ] Edge cases covered
- [ ] Test coverage > 80%

## Documentation
- [ ] README.md complete
- [ ] API documentation generated
- [ ] Installation instructions clear
- [ ] Usage examples provided

## Deployment
- [ ] Docker configuration ready
- [ ] Environment variables documented
- [ ] CI/CD pipeline configured
- [ ] Production checklist complete

Generated: $(date)
EOF

# Initialize git repository
git init
git add .
git commit -m "Initial project generation

Project: $PROJECT_NAME
Requirements: $REQUIREMENTS

Generated using LLMStack Open Source Deployment Pipeline:
- Architecture planning with Mistral
- Code generation with CodeLlama  
- Documentation with AI assistance
- Quality assurance checklist

ðŸ¤– Generated with LLMStack Open Source"

echo
echo "================================================================="
echo "  CODE GENERATION COMPLETE"
echo "================================================================="
echo "âœ“ Project created: $PROJECT_NAME"
echo "âœ“ Architecture planned"
echo "âœ“ Code generated"
echo "âœ“ Documentation created"
echo "âœ“ Git repository initialized"
echo
echo "Next steps:"
echo "1. Review generated code in $PROJECT_NAME/"
echo "2. Complete QA checklist"
echo "3. Run tests and refine code"
echo "4. Deploy when ready"
echo "================================================================="