[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pc-automation-tools"
version = "1.0.0"
description = "Comprehensive PC automation tools with Claude AI integration"
readme = "README.md"
authors = [
    {name = "Scarmonit", email = "scarmonit@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: System :: System Shells",
    "Topic :: System :: Systems Administration",
    "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture",
]
keywords = ["automation", "screenshot", "ai", "claude", "productivity"]
dependencies = [
    "pillow>=10.0.0",
    "pyperclip>=1.8.0",
    "opencv-python>=4.8.0",
    "pytesseract>=0.3.10",
    "numpy>=1.24.0",
    "pytest>=7.4.0",
]
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "transformers>=4.35.0",
]
full = [
    "pc-automation-tools[dev,ai]",
    "psutil>=5.9.0",
    "pyautogui>=0.9.54",
]

[project.urls]
Homepage = "https://github.com/Scarmonit/pc-automation-tools"
Repository = "https://github.com/Scarmonit/pc-automation-tools"
Issues = "https://github.com/Scarmonit/pc-automation-tools/issues"
Documentation = "https://github.com/Scarmonit/pc-automation-tools/blob/main/README.md"

[project.scripts]
pc-screenshot = "pc_tools.screenshot:main"
pc-advanced-screenshot = "pc_tools.advanced_screenshot:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["src", "tests"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "pytesseract.*",
    "pyperclip.*",
    "win32gui.*",
    "win32ui.*",
    "win32con.*",
    "win32api.*",
    "pyautogui.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["src/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "windows_only: marks tests that only run on Windows",
    "linux_only: marks tests that only run on Linux",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]