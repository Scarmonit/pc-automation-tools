# Enhanced Nginx Load Balancer Configuration for AI Swarm Intelligence
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" rt=$request_time '
                       'uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" '
                       'urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log detailed;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=health:10m rate=5r/s;

    # AutoGPT Load Balancer Upstream
    upstream autogpt_backend {
        least_conn;
        server autogpt-primary:3000 max_fails=3 fail_timeout=30s weight=3;
        server autogpt-secondary:3000 max_fails=3 fail_timeout=30s weight=2 backup;
        server autogpt-fallback:3000 max_fails=2 fail_timeout=60s weight=1 backup;
        
        # Health check
        keepalive 32;
    }

    # API Bridge Upstream
    upstream api_bridge_backend {
        server api-bridge:8002 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Swarm API Upstream
    upstream swarm_api_backend {
        server swarm-api-primary:8001 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Default server configuration
    server {
        listen 80 default_server;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # AutoGPT API with load balancing
        location /autogpt/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://autogpt_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
        }

        # API Bridge endpoint
        location /bridge/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://api_bridge_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 60s;
        }

        # Swarm API endpoint
        location /api/ {
            limit_req zone=api burst=30 nodelay;
            
            proxy_pass http://swarm_api_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 60s;
        }

        # Health check endpoints
        location ~ ^/health/?(.*)$ {
            limit_req zone=health burst=10 nodelay;
            
            set $backend "";
            set $path "";
            
            if ($1 ~ ^autogpt) {
                set $backend "autogpt_backend";
                set $path "/health";
            }
            if ($1 ~ ^bridge) {
                set $backend "api_bridge_backend";
                set $path "/health";
            }
            if ($1 ~ ^api) {
                set $backend "swarm_api_backend";
                set $path "/health";
            }
            
            if ($backend = "") {
                return 404;
            }
            
            proxy_pass http://$backend$path;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 10s;
        }

        # Metrics endpoint for monitoring
        location /metrics {
            access_log off;
            allow 172.20.0.0/16;
            allow 172.21.0.0/16;
            deny all;
            
            # Nginx status
            stub_status on;
        }

        # Static files (if any)
        location /static/ {
            root /var/www;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }

        # Default location
        location / {
            return 301 /autogpt/;
        }
    }

    # HTTPS server configuration (if SSL certificates are available)
    server {
        listen 443 ssl http2;
        server_name localhost;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # Same location blocks as HTTP server
        include /etc/nginx/conf.d/locations.conf;
    }
}

# Stream module for TCP load balancing (if needed)
stream {
    # Redis load balancing (if multiple Redis instances)
    upstream redis_backend {
        server redis:6379 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 6380;
        proxy_pass redis_backend;
        proxy_timeout 1s;
        proxy_responses 1;
    }
}