# AlertManager Configuration for AI Swarm Intelligence System
global:
  # Global SMTP configuration
  smtp_smarthost: 'smtp.gmail.com:587'
  smtp_from: 'swarm-alerts@yourcompany.com'
  smtp_auth_username: 'your_email@gmail.com'
  smtp_auth_password: 'your_app_password'
  smtp_require_tls: true
  
  # Global Slack configuration
  slack_api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'

# Template definitions
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Alert routing
route:
  # Default receiver
  receiver: 'default-notifications'
  
  # Group alerts by service and severity
  group_by: ['service', 'severity']
  
  # Wait before sending group notifications
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 12h
  
  # Routing rules
  routes:
    # Critical alerts - immediate notification
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 10s
      group_interval: 1m
      repeat_interval: 1h
      continue: true
    
    # AutoGPT specific alerts
    - match_re:
        service: 'autogpt.*'
      receiver: 'autogpt-team'
      group_wait: 30s
      group_interval: 2m
      repeat_interval: 4h
    
    # Database alerts
    - match_re:
        service: '.*database.*|.*sync.*'
      receiver: 'database-team'
      group_wait: 1m
      group_interval: 5m
      repeat_interval: 8h
    
    # Infrastructure alerts
    - match_re:
        service: 'node-exporter|docker|nginx'
      receiver: 'infrastructure-team'
      group_wait: 2m
      group_interval: 10m
      repeat_interval: 12h
    
    # Warning alerts - less frequent
    - match:
        severity: warning
      receiver: 'warning-alerts'
      group_wait: 2m
      group_interval: 10m
      repeat_interval: 24h

# Receivers define notification destinations
receivers:
  # Default notifications
  - name: 'default-notifications'
    email_configs:
      - to: 'admin@yourcompany.com'
        subject: '[AI SWARM] {{ .GroupLabels.service | title }} Alert'
        html: |
          <h3>AI Swarm Intelligence Alert</h3>
          <p><strong>Service:</strong> {{ .GroupLabels.service }}</p>
          <p><strong>Severity:</strong> {{ .GroupLabels.severity | title }}</p>
          <p><strong>Time:</strong> {{ .CommonAnnotations.summary }}</p>
          
          <h4>Alerts:</h4>
          <ul>
          {{ range .Alerts }}
            <li>
              <strong>{{ .Annotations.summary }}</strong><br>
              {{ .Annotations.description }}<br>
              <small>Started: {{ .StartsAt.Format "2006-01-02 15:04:05" }}</small>
            </li>
          {{ end }}
          </ul>
          
          <p><a href="{{ .ExternalURL }}">View in AlertManager</a></p>
    
    slack_configs:
      - channel: '#swarm-alerts'
        title: 'AI Swarm Alert: {{ .GroupLabels.service | title }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          {{ end }}
        color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'

  # Critical alerts - multiple channels
  - name: 'critical-alerts'
    email_configs:
      - to: 'critical-alerts@yourcompany.com,oncall@yourcompany.com'
        subject: '[CRITICAL] AI Swarm {{ .GroupLabels.service | title }}'
        html: |
          <h2 style="color: red;">CRITICAL ALERT - AI Swarm Intelligence</h2>
          <p><strong>Service:</strong> {{ .GroupLabels.service }}</p>
          <p><strong>Severity:</strong> CRITICAL</p>
          
          <h3>Critical Issues:</h3>
          <ul>
          {{ range .Alerts }}
            <li style="color: red;">
              <strong>{{ .Annotations.summary }}</strong><br>
              {{ .Annotations.description }}<br>
              <small>Started: {{ .StartsAt.Format "2006-01-02 15:04:05" }}</small>
              {{ if .Annotations.runbook_url }}
              <br><a href="{{ .Annotations.runbook_url }}">Runbook</a>
              {{ end }}
            </li>
          {{ end }}
          </ul>
          
          <p><strong>Immediate action required!</strong></p>
          <p><a href="{{ .ExternalURL }}">AlertManager</a> | <a href="http://localhost:3001">Grafana Dashboard</a></p>
    
    slack_configs:
      - channel: '#critical-alerts'
        title: 'üö® CRITICAL: {{ .GroupLabels.service | title }}'
        text: |
          @channel Critical alert in AI Swarm!
          
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          {{ if .Annotations.runbook_url }}[Runbook]({{ .Annotations.runbook_url }}){{ end }}
          {{ end }}
        color: 'danger'
    
    # Webhook for PagerDuty or other services
    webhook_configs:
      - url: 'https://your-pagerduty-webhook-url.com'
        http_config:
          bearer_token: 'your-pagerduty-token'

  # AutoGPT team notifications
  - name: 'autogpt-team'
    email_configs:
      - to: 'autogpt-team@yourcompany.com'
        subject: '[AutoGPT] {{ .GroupLabels.service | title }} Alert'
        html: |
          <h3>AutoGPT Service Alert</h3>
          <p><strong>Service:</strong> {{ .GroupLabels.service }}</p>
          <p><strong>Severity:</strong> {{ .GroupLabels.severity | title }}</p>
          
          <h4>AutoGPT Issues:</h4>
          <ul>
          {{ range .Alerts }}
            <li>
              <strong>{{ .Annotations.summary }}</strong><br>
              {{ .Annotations.description }}<br>
              <small>Started: {{ .StartsAt.Format "2006-01-02 15:04:05" }}</small>
            </li>
          {{ end }}
          </ul>
          
          <p><a href="http://localhost:3001/d/autogpt">AutoGPT Dashboard</a></p>
    
    slack_configs:
      - channel: '#autogpt-alerts'
        title: 'ü§ñ AutoGPT Alert: {{ .GroupLabels.service | title }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          {{ end }}

  # Database team notifications
  - name: 'database-team'
    email_configs:
      - to: 'database-team@yourcompany.com'
        subject: '[Database] {{ .GroupLabels.service | title }} Alert'
        html: |
          <h3>Database/Sync Service Alert</h3>
          <p><strong>Service:</strong> {{ .GroupLabels.service }}</p>
          <p><strong>Severity:</strong> {{ .GroupLabels.severity | title }}</p>
          
          <h4>Database Issues:</h4>
          <ul>
          {{ range .Alerts }}
            <li>
              <strong>{{ .Annotations.summary }}</strong><br>
              {{ .Annotations.description }}<br>
              <small>Started: {{ .StartsAt.Format "2006-01-02 15:04:05" }}</small>
            </li>
          {{ end }}
          </ul>
          
          <p><a href="http://localhost:3001/d/database">Database Dashboard</a></p>
    
    slack_configs:
      - channel: '#database-alerts'
        title: 'üíæ Database Alert: {{ .GroupLabels.service | title }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          {{ end }}

  # Infrastructure team notifications
  - name: 'infrastructure-team'
    email_configs:
      - to: 'infrastructure@yourcompany.com'
        subject: '[Infrastructure] {{ .GroupLabels.service | title }} Alert'
        html: |
          <h3>Infrastructure Alert</h3>
          <p><strong>Service:</strong> {{ .GroupLabels.service }}</p>
          <p><strong>Severity:</strong> {{ .GroupLabels.severity | title }}</p>
          
          <h4>Infrastructure Issues:</h4>
          <ul>
          {{ range .Alerts }}
            <li>
              <strong>{{ .Annotations.summary }}</strong><br>
              {{ .Annotations.description }}<br>
              <small>Started: {{ .StartsAt.Format "2006-01-02 15:04:05" }}</small>
            </li>
          {{ end }}
          </ul>
          
          <p><a href="http://localhost:3001/d/infrastructure">Infrastructure Dashboard</a></p>
    
    slack_configs:
      - channel: '#infrastructure-alerts'
        title: 'üèóÔ∏è Infrastructure Alert: {{ .GroupLabels.service | title }}'
        text: |
          {{ range .Alerts }}
          *{{ .Annotations.summary }}*
          {{ .Annotations.description }}
          {{ end }}

  # Warning alerts - less intrusive
  - name: 'warning-alerts'
    email_configs:
      - to: 'monitoring@yourcompany.com'
        subject: '[Warning] AI Swarm {{ .GroupLabels.service | title }}'
        html: |
          <h3>AI Swarm Warning</h3>
          <p><strong>Service:</strong> {{ .GroupLabels.service }}</p>
          <p><strong>Severity:</strong> Warning</p>
          
          <h4>Warning Details:</h4>
          <ul>
          {{ range .Alerts }}
            <li>
              <strong>{{ .Annotations.summary }}</strong><br>
              {{ .Annotations.description }}<br>
              <small>Started: {{ .StartsAt.Format "2006-01-02 15:04:05" }}</small>
            </li>
          {{ end }}
          </ul>
    
    slack_configs:
      - channel: '#swarm-warnings'
        title: '‚ö†Ô∏è Warning: {{ .GroupLabels.service | title }}'
        text: |
          {{ range .Alerts }}
          {{ .Annotations.summary }}
          {{ end }}
        color: 'warning'

# Inhibit rules - prevent spam
inhibit_rules:
  # Inhibit warning alerts if critical alert is firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['service']
  
  # Inhibit error alerts if critical alert is firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'error'
    equal: ['service']
  
  # Inhibit info alerts if warning or higher is firing
  - source_match_re:
      severity: 'warning|error|critical'
    target_match:
      severity: 'info'
    equal: ['service']

# Silence configuration
silences:
  # Example: Silence maintenance windows
  # This would typically be managed via API or UI