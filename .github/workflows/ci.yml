name: PC Automation Tools CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr
        sudo apt-get install -y xvfb
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xvfb
        pip install pillow pyperclip pytesseract opencv-python numpy
    
    - name: Install test dependencies
      run: |
        pip install -r requirements.txt || echo "Requirements file not found, using minimal deps"
    
    - name: Run tests with coverage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export DISPLAY=:99
        xvfb-run -s "-screen 0 1024x768x24" python -m pytest src/tests/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        CI: true
    
    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m pytest src/tests/ -v --tb=short
      env:
        CI: true
    
    - name: Upload coverage to Codecov (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Run Black formatter check
      run: black --check --diff src/
    
    - name: Run isort import sorting check
      run: isort --check-only --diff src/
    
    - name: Run flake8 linting
      run: flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy type checking
      run: mypy src/ --ignore-missing-imports --no-strict-optional

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety vulnerability check
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build distribution
      run: python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: windows-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pillow pyperclip pytesseract opencv-python numpy pytest
    
    - name: Test main.py integration
      run: |
        python main.py --help || echo "Main script executed"
    
    - name: Test screenshot tool
      run: |
        python src/pc_tools/screenshot.py --help || echo "Screenshot tool tested"
    
    - name: Test MASTER_LAUNCHER (if exists)
      run: |
        if (Test-Path "MASTER_LAUNCHER.bat") { 
          echo "MASTER_LAUNCHER.bat found - would test in real environment"
        }
      shell: powershell

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material
    
    - name: Generate documentation
      run: |
        mkdir -p docs/generated
        echo "# PC Automation Tools Documentation" > docs/generated/index.md
        echo "Auto-generated on $(date)" >> docs/generated/index.md
        echo "" >> docs/generated/index.md
        echo "## Repository Structure" >> docs/generated/index.md
        find . -name "*.py" -type f | head -20 >> docs/generated/index.md
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2