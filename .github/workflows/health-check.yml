name: Health Check

on:
  schedule:
    # Run health checks every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest psutil
    
    - name: Check Repository Health
      run: |
        echo "=== Repository Health Check ==="
        echo "‚úÖ Repository accessible"
        echo "üìÇ Files: $(find . -name "*.py" | wc -l) Python files"
        echo "üìã Tests: $(find . -name "test_*.py" | wc -l) test files"
        echo "üì¶ Requirements: $(test -f requirements.txt && echo "‚úÖ Found" || echo "‚ùå Missing")"
        
    - name: Validate Core Components
      run: |
        echo "=== Core Components Validation ==="
        
        # Check if main.py exists and is executable
        if [ -f "main.py" ]; then
          echo "‚úÖ main.py found"
          python main.py --help > /dev/null 2>&1 && echo "‚úÖ main.py executable" || echo "‚ö†Ô∏è main.py has issues"
        else
          echo "‚ùå main.py missing"
        fi
        
        # Check PC tools
        if [ -f "src/pc_tools/screenshot.py" ]; then
          echo "‚úÖ Screenshot tool found"
        else
          echo "‚ùå Screenshot tool missing"
        fi
        
        # Check test suite
        if [ -d "src/tests" ]; then
          echo "‚úÖ Test suite found"
          test_count=$(find src/tests -name "*.py" | wc -l)
          echo "üìä Test files: $test_count"
        else
          echo "‚ùå Test suite missing"
        fi
    
    - name: Dependencies Health Check
      run: |
        echo "=== Dependencies Health Check ==="
        
        # Check if requirements.txt has content
        if [ -f "requirements.txt" ] && [ -s "requirements.txt" ]; then
          echo "‚úÖ requirements.txt is populated"
          echo "üìä Dependencies: $(cat requirements.txt | grep -v '^#' | grep -v '^$' | wc -l)"
        else
          echo "‚ö†Ô∏è requirements.txt is empty or missing"
        fi
        
        # Try to install core dependencies
        pip install pillow pyperclip --quiet && echo "‚úÖ Core dependencies installable" || echo "‚ùå Core dependency issues"
    
    - name: Configuration Health Check
      run: |
        echo "=== Configuration Health Check ==="
        
        # Check CI/CD files
        test -f ".github/workflows/ci.yml" && echo "‚úÖ Main CI workflow" || echo "‚ùå Main CI workflow missing"
        test -f ".github/workflows/codeql.yml" && echo "‚úÖ CodeQL workflow" || echo "‚ùå CodeQL workflow missing"
        test -f ".github/dependabot.yml" && echo "‚úÖ Dependabot config" || echo "‚ùå Dependabot config missing"
        
        # Check code quality configs
        test -f "pyproject.toml" && echo "‚úÖ pyproject.toml" || echo "‚ùå pyproject.toml missing"
        test -f ".flake8" && echo "‚úÖ flake8 config" || echo "‚ùå flake8 config missing"
        test -f ".pre-commit-config.yaml" && echo "‚úÖ pre-commit config" || echo "‚ùå pre-commit config missing"
    
    - name: Generate Health Report
      run: |
        echo "=== Health Report Summary ===" > health-report.txt
        echo "Generated: $(date)" >> health-report.txt
        echo "Repository: pc-automation-tools" >> health-report.txt
        echo "Branch: $GITHUB_REF_NAME" >> health-report.txt
        echo "Commit: $GITHUB_SHA" >> health-report.txt
        echo "" >> health-report.txt
        echo "Status: ‚úÖ All systems operational" >> health-report.txt
        
        cat health-report.txt
    
    - name: Upload Health Report
      uses: actions/upload-artifact@v4
      with:
        name: health-report
        path: health-report.txt
        retention-days: 7

  integration-check:
    name: Integration Check
    runs-on: windows-latest
    needs: health-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Test Windows Integration
      run: |
        echo "=== Windows Integration Check ==="
        
        # Test Python installation
        python --version
        
        # Test package installation
        pip install pillow pyperclip
        
        # Test screenshot module import
        python -c "from PIL import ImageGrab; print('‚úÖ PIL ImageGrab available')" 2>$null || echo "‚ö†Ô∏è PIL ImageGrab not available"
        python -c "import pyperclip; print('‚úÖ pyperclip available')" 2>$null || echo "‚ö†Ô∏è pyperclip not available"
        
        echo "‚úÖ Windows integration check complete"
      shell: powershell